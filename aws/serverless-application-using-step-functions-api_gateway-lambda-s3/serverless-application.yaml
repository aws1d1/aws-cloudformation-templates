AWSTemplateFormatVersion : 2010-09-09

Parameters:
  TemplateBucketName:
    Type: String
    Default: buildingblock

Resources:
  StepFuntionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "StepFuntionRole" # RoleName: 'RoleForStepFunction'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaInvocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: '*'
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LambdaExecutionRole" # RoleName: 'LambdaRuntimeRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: allowCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: allowSesStatefnSns
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ses:*
                - states:*
                - sns:*
              Resource: '*'

  SESConfigSet:
    Type: 'AWS::SES::ConfigurationSet'
    Properties:
      Name: CustomConfigSet

  EmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - '-'
          - - !Sub ${TemplateBucketName}
            - !Ref AWS::AccountId
        S3Key: lambda/lambda_email_function.zip
      FunctionName: !Join
          - '-'
          - - 'lambda-email'
            - !Ref AWS::Region
            - !Ref AWS::AccountId
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          SES_CONFIG_SET_NAME:
            Ref: SESConfigSet

  SmsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - '-'
          - - !Sub ${TemplateBucketName}
            - !Ref AWS::AccountId
        S3Key: lambda/lambda_sms_function.zip
      FunctionName: !Join
          - '-'
          - - 'lambda-sms'
            - !Ref AWS::Region
            - !Ref AWS::AccountId
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 60
      MemorySize: 512

  ApiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - '-'
          - - !Sub ${TemplateBucketName}
            - !Ref AWS::AccountId
        S3Key: lambda/lambda_api_function.zip
      FunctionName: !Join
          - '-'
          - - 'lambda-api'
            - !Ref AWS::Region
            - !Ref AWS::AccountId
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 60
      MemorySize: 512

  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: MyStateMachine
      DefinitionS3Location:
        Bucket: !Join
          - '-'
          - - !Sub ${TemplateBucketName}
            - !Ref AWS::AccountId
        Key: step/step-function-template.json
      DefinitionSubstitutions:
        EMAIL_REMINDER_ARN: !GetAtt EmailLambdaFunction.Arn
        TEXT_REMINDER_ARN: !GetAtt SmsLambdaFunction.Arn
      RoleArn: !GetAtt StepFuntionRole.Arn